### Reflect on Your Design
Document your design decisions by answering the following questions:
   
- What additional properties did you add to your models and why?
Game:
 - board
   - In Guess a Number, the target was just an integer, whereas for Hangman I
   needed a way to represent the more complex guessing of the letters of a word. 
   Using a python list represented in the Datastore as a JsonProperty, I was 
   able to generate single character strings with asterisks (*) representing 
   blanks. These stars are replaced by the the API with the correct string 
   character as the user guesses the correct letters.

 - already_guessed
   - I needed a way to keep track of what letters were guessed for each game,
   to make sure a user could not guess the same letter twice as well as to
   easily generate the guesses of each 'move' as part of a game's history.
 - history
   - To be able to generate a history of moves for each game, this JsonProperty
   stores a list of dictionaries, with each dictionary containing the board,
   the guess, and the letters already guessed for each game.
 - to_history_form(self)
   - This instance method copies the required information from the Game instance
   history attribute to a history form for transmission over the network.

Ranking: The ranking is a subclass of ndb.Model so it can be easily stored,
modified and retrieved from Google Datastore. I decided to add this class
as an ancestor of a User key, so each User could create or update a Ranking.
 - user
   - KeyProperty which defines the ancestor relationship to the User kind
 - wins
   - Keeps track of how many games a user has won.
 - percent_won
   - A float indicating what percentage of games played the player has won
 - avg_wrong
   - Stores the average number of wrong guesses across games
 - new_ranking(cls, user, wins, percent_won, avg_wrong)
   - Class method called to construct a new ranking for a User.
 - to_form(self, message)
   - This instance method transfers information to RankingForm for network
   transmission

Score:
 - total_incorrect
   - I needed to modify this attribute to only include incorrect guesses, not
   total guesses. I did not count correct guesses against the player.

I wrote the following additional forms to help me extend the functionality of
the API
GameForms()
RankingForm()
RankingForms()
HistoryForm()

- What were some of the trade-offs or struggles you faced when implementing
the new game logic?


